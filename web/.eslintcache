[{"C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\index.tsx":"1","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\App.tsx":"2","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\routes.tsx":"3","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\pages\\Landing.tsx":"4","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\pages\\CreatePonto.tsx":"5","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\pages\\PontosMap.tsx":"6","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\pages\\Ponto.tsx":"7","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\services\\api.ts":"8","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\utils\\mapIcon.ts":"9","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\components\\Sidebar.tsx":"10"},{"size":207,"mtime":1607369484000,"results":"11","hashOfConfig":"12"},{"size":233,"mtime":1607369484000,"results":"13","hashOfConfig":"12"},{"size":680,"mtime":1611610776728,"results":"14","hashOfConfig":"12"},{"size":987,"mtime":1609869743458,"results":"15","hashOfConfig":"12"},{"size":5731,"mtime":1611872786732,"results":"16","hashOfConfig":"12"},{"size":2598,"mtime":1611872604399,"results":"17","hashOfConfig":"12"},{"size":4193,"mtime":1611872826136,"results":"18","hashOfConfig":"12"},{"size":119,"mtime":1607369484000,"results":"19","hashOfConfig":"12"},{"size":261,"mtime":1607369484000,"results":"20","hashOfConfig":"12"},{"size":617,"mtime":1607369484000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"k3eaqo",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\index.tsx",[],["46","47"],"C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\App.tsx",[],"C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\routes.tsx",[],"C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\pages\\Landing.tsx",[],"C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\pages\\CreatePonto.tsx",["48"],"import React, { FormEvent, useState, ChangeEvent } from \"react\";\r\nimport { MapContainer, Marker, TileLayer } from 'react-leaflet';\r\nimport { LeafletMouseEvent } from 'leaflet'\r\nimport { FiPlus } from \"react-icons/fi\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport api from \"../services/api\";\r\n\r\nimport '../styles/pages/create-ponto.css';\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport mapIcon from \"../utils/mapIcon\";\r\n\r\n\r\nexport default function CreatePonto() {\r\n\r\n  const history = useHistory()\r\n\r\n  const [ position, setPosition ] = useState({ latitude: 0, longitude: 0 })\r\n\r\n  const [name, setName] = useState('')\r\n  const [about, setAbout] = useState('')\r\n  const [instructions, setInstructions] = useState('')\r\n  const [opening_hours, setOpeningHours] = useState('')\r\n  const [open_on_weekends, setOpenOnWeekends] = useState(true)\r\n  const [images, setImages] = useState<File[]>([])\r\n  const [previewImages, setPreviewImages] = useState<string[]>([])\r\n\r\n\r\n  function handleMapClick(event: LeafletMouseEvent) {\r\n    const { lat, lng } = event.latlng\r\n\r\n    setPosition({\r\n      latitude: lat,\r\n      longitude: lng\r\n    })\r\n  }\r\n\r\n  function handleSelectImage(event: ChangeEvent<HTMLInputElement>) {\r\n    if (!event.target.files) return\r\n\r\n    const selectedImages = Array.from(event.target.files)\r\n    setImages(selectedImages)\r\n\r\n    const selectedImagesPreview = selectedImages.map(image => URL.createObjectURL(image))\r\n\r\n    setPreviewImages(selectedImagesPreview)\r\n  }\r\n\r\n  async function handleSubmit(event: FormEvent) {\r\n    event.preventDefault()\r\n\r\n    const { latitude, longitude } = position\r\n    const data = new FormData()\r\n\r\n    data.append('name', name)\r\n    data.append('about', about)\r\n    data.append('latitude', String(latitude))\r\n    data.append('longitude', String(longitude))\r\n    data.append('instructions', instructions)\r\n    data.append('opening_hours', opening_hours)\r\n    data.append('open_on_weekends', String(open_on_weekends))\r\n    images.forEach(image => data.append(\"images\", image))\r\n\r\n    await api.post('/pontos', data)\r\n\r\n    alert('Cadastro realizado com sucesso!!')\r\n    history.push('/app')\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-create-ponto\">\r\n\r\n    <Sidebar />\r\n\r\n      <main>\r\n        <form className=\"create-ponto-form\" onSubmit={handleSubmit}>\r\n          <fieldset>\r\n            <legend>Dados</legend>\r\n\r\n            <MapContainer\r\n              center={[-22.9006421,-47.0972342]} \r\n              style={{ width: '100%', height: 280 }}\r\n              zoom={15}\r\n              //onclick={handleMapClick}\r\n            >\r\n              \r\n              <TileLayer \r\n                url={`https://api.mapbox.com/styles/v1/mapbox/light-v10/tiles/256/{z}/{x}/{y}@2x?access_token=${process.env.REACT_APP_MAPBOX_TOKEN}`}\r\n              />\r\n\r\n              { position.latitude !== 0 && (\r\n                <Marker \r\n                interactive={false} \r\n                icon={mapIcon} \r\n                position={[\r\n                  position.latitude, \r\n                  position.longitude]} \r\n                />\r\n              )}\r\n\r\n            </MapContainer>\r\n\r\n            <div className=\"input-block\">\r\n              <label htmlFor=\"name\">Nome</label>\r\n              <input id=\"name\" \r\n              value={name} \r\n              onChange={event => setName(event.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"input-block\">\r\n              <label htmlFor=\"about\">Sobre <span>Máximo de 700 caracteres</span></label>\r\n              <textarea id=\"name\" maxLength={700} \r\n              value={about} \r\n              onChange={event => setAbout(event.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"input-block\">\r\n              <label htmlFor=\"images\">Fotos</label>\r\n\r\n              <div className=\"images-container\">\r\n                {previewImages.map(image => <img key={image} src={image} alt={image} />)}\r\n                <label htmlFor=\"image[]\" className=\"new-image\">\r\n                  <FiPlus size={24} color=\"#15b6d6\" />\r\n                </label>\r\n              </div>\r\n\r\n              <input multiple onChange={handleSelectImage} type=\"file\" id=\"image[]\"/>\r\n\r\n            </div>\r\n          </fieldset>\r\n\r\n          <fieldset>\r\n            <legend>Visitação</legend>\r\n\r\n            <div className=\"input-block\">\r\n              <label htmlFor=\"instructions\">Informações</label>\r\n              <textarea id=\"instructions\" \r\n              value={instructions} \r\n              onChange={event => setInstructions(event.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"input-block\">\r\n              <label htmlFor=\"opening_hours\">Horário de Funcionamento</label>\r\n              <input id=\"opening_hours\" \r\n              value={opening_hours} \r\n              onChange={event => setOpeningHours(event.target.value)} />\r\n            </div>\r\n\r\n            <div className=\"input-block\">\r\n              <label htmlFor=\"open_on_weekends\">Necessita Agendamento?</label>\r\n\r\n              <div className=\"button-select\">\r\n                <button type=\"button\" \r\n                className={open_on_weekends ? 'active' : ''}\r\n                onClick={() => setOpenOnWeekends(true)}\r\n                >Sim</button>\r\n                <button \r\n                type=\"button\"\r\n                className={!open_on_weekends ? 'active' : ''}\r\n                onClick={() => setOpenOnWeekends(false)}\r\n                >Não</button>\r\n              </div>\r\n            </div>\r\n          </fieldset>\r\n\r\n          <button className=\"confirm-button\" type=\"submit\">\r\n            Confirmar\r\n          </button>\r\n        </form>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\n// return `https://a.tile.openstreetmap.org/${z}/${x}/${y}.png`;\r\n","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\pages\\PontosMap.tsx",[],"C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\pages\\Ponto.tsx",["49","50"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport { FaWhatsapp } from \"react-icons/fa\";\r\nimport { FiClock, FiInfo } from \"react-icons/fi\";\r\nimport { MapContainer, Marker, TileLayer } from \"react-leaflet\";\r\nimport api from \"../services/api\";\r\n\r\n\r\nimport '../styles/pages/ponto.css';\r\nimport Sidebar from \"../components/Sidebar\";\r\nimport mapIcon from '../utils/mapIcon'\r\n\r\ninterface Ponto {\r\n  id: number\r\n  name: string\r\n  latitude: number\r\n  longitude: number\r\n  about: string\r\n  instruction: string\r\n  opening_hours: string\r\n  open_on_weekends: boolean\r\n  images: Array<{\r\n    id: number\r\n    url: string\r\n  }>\r\n}\r\n\r\ninterface PontoParams {\r\n  id: string\r\n}\r\n\r\nexport default function Ponto() {\r\n\r\n  const params = useParams<PontoParams>()\r\n  const [ ponto, setPontos ] = useState<Ponto>()\r\n  const [activeImageIndex, setActiveImageIndex] = useState(0)\r\n\r\n    useEffect(() => {\r\n        api.get(`/pontos/${params.id}`).then(response => {\r\n            setPontos(response.data)\r\n        })\r\n    }, [params.id])\r\n\r\n    if (!ponto) {\r\n      return <p>Carregando...</p>\r\n    }\r\n\r\n  return (\r\n    <div id=\"page-ponto\">\r\n      \r\n    <Sidebar />\r\n\r\n      <main>\r\n        <div className=\"ponto-details\">\r\n          <img src={ponto.images[activeImageIndex].url} alt={ponto.name} />\r\n\r\n          <div className=\"images\">\r\n            {ponto.images.map((image, index) => {\r\n              return (\r\n                <button \r\n                key={image.id} \r\n                className={activeImageIndex === index ? 'active' : ''}\r\n                onClick={() => {\r\n                    setActiveImageIndex(index)\r\n                  }\r\n                } \r\n                type=\"button\">\r\n                  <img src={image.url} alt={ponto.name} />\r\n                </button>\r\n              )\r\n            })}\r\n          </div>\r\n          \r\n          <div className=\"ponto-details-content\">\r\n            <h1>{ponto.name}</h1>\r\n            <p>{ponto.about}</p>\r\n\r\n            <div className=\"map-container\">\r\n              <MapContainer\r\n                center={[ponto.latitude, ponto.longitude]} \r\n                zoom={16} \r\n                style={{ width: '100%', height: 280 }}\r\n                dragging={false}\r\n                touchZoom={false}\r\n                zoomControl={false}\r\n                scrollWheelZoom={false}\r\n                doubleClickZoom={false}\r\n              >\r\n                <TileLayer \r\n                  url={`https://api.mapbox.com/styles/v1/mapbox/light-v10/tiles/256/{z}/{x}/{y}@2x?access_token=${process.env.REACT_APP_MAPBOX_TOKEN}`}\r\n                />\r\n                <Marker interactive={false} icon={mapIcon} position={[ponto.latitude, ponto.longitude]} />\r\n              </MapContainer>\r\n\r\n              <footer>\r\n                <a href={`https://www.google.com/maps/dir/?api=1&destination=${ponto.latitude}, ${ponto.longitude}`} target=\"_blank\" rel=\"noopener noreferrer\">Ver rotas no Google Maps</a>\r\n              </footer>\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <h2>Instruções para visita</h2>\r\n            <p>{ponto.instruction}</p>\r\n\r\n            <div className=\"open-details\">\r\n              <div className=\"hour\">\r\n                <FiClock size={32} color=\"#15B6D6\" />\r\n                Dias de funcionamento:<br />\r\n                {ponto.opening_hours}\r\n              </div>\r\n              { ponto.open_on_weekends ? (\r\n                <div className=\"open-on-weekends\">\r\n                  <FiInfo size={32} color=\"#39CC83\" />\r\n                  Agendamento <br />\r\n                  é necessário\r\n                </div>\r\n                ) : (\r\n                  <div className=\"open-on-weekends dont-open\">\r\n                    <FiInfo size={32} color=\"#ff6690\" />\r\n                    Agendamento <br />\r\n                    não é necessário\r\n                  </div>\r\n                ) \r\n              }\r\n            </div>\r\n\r\n            {/* <button type=\"button\" className=\"contact-button\">\r\n              <FaWhatsapp size={20} color=\"#FFF\" />\r\n              Entrar em contato\r\n            </button> */}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}","C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\services\\api.ts",[],"C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\utils\\mapIcon.ts",[],"C:\\Users\\clwil\\Desktop\\Trampo\\PontosHistoricos\\web\\src\\components\\Sidebar.tsx",[],["51","52"],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":28,"column":12,"nodeType":"59","messageId":"60","endLine":28,"endColumn":26},{"ruleId":"57","severity":1,"message":"61","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":20},{"ruleId":"62","severity":1,"message":"63","line":33,"column":25,"nodeType":"59","messageId":"64","endLine":33,"endColumn":30},{"ruleId":"53","replacedBy":"65"},{"ruleId":"55","replacedBy":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"@typescript-eslint/no-unused-vars","'handleMapClick' is defined but never used.","Identifier","unusedVar","'FaWhatsapp' is defined but never used.","@typescript-eslint/no-redeclare","'Ponto' is already defined.","redeclared",["67"],["68"],"no-global-assign","no-unsafe-negation"]